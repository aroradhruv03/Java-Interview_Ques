package StringMatchingAlgo;

import org.junit.Test;

import static org.junit.Assert.*;

/**
 * @author Dhruv
 * @version 1.0
 * Date 4/28/16
 *
 * This is a class for Tests
 */
public class StringMatchingAlgoTests {

    String inp100 = "UJ58hzQnPAA7cuxL4iz9P3tBYwNwxXyuSf4nhoyjv1Q3BOCh7j6MHy0UWSZsp97Va2NYGbQxnw978kq2CplLFfXmD6sr3Y8FkMXuCAG5x1Evs62vqW9hUMLJXEXl3KptIG";
    String inp1000 = "xYr6xj6zwU7arI284Tk7AS4Lmc4H2MXG6lHhxPxUhJRGqxFkYuzl8GBIbfhzY2Z8JmbwTsWc5Lj72v3HwO6bYtpl260N874wSb0S9XwVyxK1ccqBBwM48TWyocXie1MvwqpIDPNTJswX6h3RyVyUrC2ckxUpGry2bngJEJMxVc2GVmsIHfeTffv91U8t55NlfZ5iUhrVKx7GgpYcesIJ4f3NIPpk0GjNC2Yu7pynRLGUFw3HeC40y3VR0R83Plfyca5oAp3Vu6oTvgjOXQcnCmtI7nlzUhB2QLTrjMlwEzE5vYjtfzzTKHtbxPn0DSqEmJBR3OJ2Sq93t564bBQv4nUIKKw07Ovv5kPTpnbblVJVvViSqf4KqVU2YZB570KXEBgkxeRLvOCJhcB4hNoQC6q7UXLZJi5KyTakGB6lZQF6xP1RoKVM4rtzso0VzQDeENjzSJYKzIr7AxJzImnHABomvEsC8eFGXZA3rzTmUwjoVBNVmtFeSUvMRzUZC8MVouJxxXYAbxRUZyqeyeigS6bu0GjKKL5tNmfRtIVNg9lRTv6cC2ThjeUhS0CVBcfolPYbzkcpyzThDWRyc8zuE4xLCfSr59t1oyacgxatWt5ASvgn7NWxR9F83IAEj9RB6JeKeF5GheeBmfaxgP52DbXQ79brsCAVJfMIGRoC8ptjHM2PUtunIRDl2Nw6zgzSyCLVCKoskGAtjNjJrqTTCqFcP8XMMeKBDZOJisBnAIj5BLpcog8texfqL83OPYHcrWltvHxn7Tm6eymxHiewCNhNGuAXBKnzraBk3JXA7cBRHGONWSCFQ8NAxR28CwkN9W7LuWNozhjYowZhht9Qo18OvBSX0c4orj5CclPGaYmn5wR0Ghx1fMGYJYmwALjbBFmvJs2U9xmAxm783i3gnWQyvM9CBHmtsGOlwGRD1ppWM1JQoAqOZaqZt89gAxuxMuMUlxq4HPooHAssHVbJDiebMuagenpXqkJqQIQ7p97Va2NYGbQxnw978kq2CplLFfXmD6sr3Y8FkMXuCAG5x1Evs62vqW9hUMLJXEXl3KptIG";
    String inp10000 = "";
    String pattern = "G5x1Evs62vqW9hUMLJXEXl3";

    @Test
    public void testFor100() throws Exception {

        NaiveStrMatch n = new NaiveStrMatch(inp100,pattern);
        RabinKarpSearch r = new RabinKarpSearch(inp100,pattern);
        KMPStrSrch k = new KMPStrSrch(inp100,pattern);

        assertEquals(102, n.NaiveSearch());
        assertEquals(102, r.patternSearch());
        assertEquals(102, k.KMP());
    }

    @Test
    public void testFor1000() {

        NaiveStrMatch n = new NaiveStrMatch(inp1000,pattern);
        RabinKarpSearch r = new RabinKarpSearch(inp1000,pattern);
        KMPStrSrch k = new KMPStrSrch(inp1000,pattern);

        assertEquals(1042, n.NaiveSearch());
        assertEquals(1042, r.patternSearch());
        assertEquals(1042, k.KMP());
    }

    @Test
    public void testFor10000() {

        NaiveStrMatch n = new NaiveStrMatch(inp10000,pattern);
        RabinKarpSearch r = new RabinKarpSearch(inp10000,pattern);
        KMPStrSrch k = new KMPStrSrch(inp10000,pattern);

        assertEquals(10042, n.NaiveSearch());
        assertEquals(10042, r.patternSearch());
        assertEquals(10042, k.KMP());
    }

    @Test
    public void testForSameInput() {

        NaiveStrMatch n = new NaiveStrMatch(inp1000,inp1000);
        RabinKarpSearch r = new RabinKarpSearch(inp1000,inp1000);
        KMPStrSrch k = new KMPStrSrch(inp1000,inp1000);

        assertEquals(0, n.NaiveSearch());
        assertEquals(0, r.patternSearch());
        assertEquals(0, k.KMP());
    }

    @Test
    public void testForPatternGreater() {

        NaiveStrMatch n = new NaiveStrMatch("asd","asdf4");
        RabinKarpSearch r = new RabinKarpSearch("asd","asdf4");
        KMPStrSrch k = new KMPStrSrch("asd","asdf4");

        assertEquals(-1, n.NaiveSearch());
        assertEquals(-1, r.patternSearch());
        assertEquals(-1, k.KMP());
    }

    @Test
    public void testForNotEqual() {

        NaiveStrMatch n = new NaiveStrMatch("asdasdasdasd","qwe");
        RabinKarpSearch r = new RabinKarpSearch("asdasdasdasd","qwe");
        KMPStrSrch k = new KMPStrSrch("asdasdasdasd","qwe");

        assertEquals(-1, n.NaiveSearch());
        assertEquals(-1, r.patternSearch());
        assertEquals(-1, k.KMP());
    }

    @Test
    public void testForEmptyInputs() {

        NaiveStrMatch n = new NaiveStrMatch("","");
        RabinKarpSearch r = new RabinKarpSearch("","");
        KMPStrSrch k = new KMPStrSrch("","");

        assertEquals(-1, n.NaiveSearch());
        assertEquals(-1, r.patternSearch());
        assertEquals(-1, k.KMP());
    }
}